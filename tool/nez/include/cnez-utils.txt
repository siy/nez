void cnez_dump(Tree* t, FILE *fp, int depth)
{
    size_t i;
    if(t == NULL) {
        fputs("null", fp);
        return;
    }
    /*
    if(t->refc != 1) {
        fprintf(fp, "@%ld", t->refc);
    }
    */
    fputs("\n", fp);
    for(i = 0; i < depth; i++) {
        fputs(" ", fp);
    }

    fputs("[#", fp);
    fputs(_tags[t->tag], fp);
    if(t->size == 0) {
        fputs(" '", fp);
        for(i = 0; i < t->len; i++) {
            fputc(t->text[i], fp);
        }
        fputs("'", fp);
    }
    else {
        for(i = 0; i < t->size; i++) {
            fputs(" ", fp);
            if(t->labels[i] != 0) {
                fputs("$", fp);
                fputs(_labels[t->labels[i]], fp);
                fputs("=", fp);
            }
            cnez_dump(t->childs[i], fp, depth + 1);
        }
    }
    fputs("]", fp);
}

#ifndef UNUSE_MAIN

#include<sys/time.h>

#define NUM_BENCH_RUNS 1000

static char *get_input(const char *path, size_t *size)
{
    FILE *fp = fopen(path, "rb");

    if(fp != NULL) {
        size_t len;
        fseek(fp, 0, SEEK_END);
        len = (size_t) ftell(fp);
        fseek(fp, 0, SEEK_SET);
        char *buf = (char *) calloc(1, len + 1);
        size_t readed = fread(buf, 1, len, fp);
        if(readed != len) {
            fprintf(stderr, "read error: %s\n", path);
            exit(1);
        }
        fclose(fp);
        *size = len;
        return buf;
    }

    return NULL;
}

/* calculate time difference in us */
static double timediff(struct timeval *s, struct timeval *e)
{
    double t1 = (e->tv_sec - s->tv_sec) * 1000000.0;
    double t2 = (e->tv_usec - s->tv_usec);
    return t1 + t2;
}

int run_bench(const char* name, const char *input, int len, void* (*parse)(const char *input, size_t len)) {
    double tsum = 0.0;
    double t[NUM_BENCH_RUNS];

    int i = 0;
    for(i = 0; i < NUM_BENCH_RUNS; i++) {
        struct timeval s, e;
        gettimeofday(&s, NULL);
        void *data = parse(input, len);
        gettimeofday(&e, NULL);
        if(data == NULL) {
            fprintf(stdout, "%s - FAIL %f[us]\n", name, timediff(&s, &e));
            return 0;
        }
        t[i] = timediff(&s, &e);
        tsum += t[i];
        cnez_free(data);
    }
    fprintf(stdout, "%s - PASS %0.4f[us]\n", name, tsum / NUM_BENCH_RUNS);

    return 1;
}

int cnez_main(int ac, const char **av, void* (*parse)(const char *input, size_t len))
{
    int j;
    size_t len;
    int verbose = 0;
    int bench = 0;
    int mem = 0;

    if(ac == 1) {
        fprintf(stdout,
                "Usage: %s [-v] [-b] [-m] file1 file2 ...\n"
                "\t-v - Verbose (print AST)\n"
                "\t-m - Dump memory\n"
                "\t-b - Run benchmark\n",
                av[0]);
        return 1;
    }

    for(j = 1; j < ac; j++) {
        if (av[j][0] != '-') {
            break;
        }

        if(!strcmp(av[j], "-v")) {
            verbose = 1;
        }

        if(!strcmp(av[j], "-b")) {
            bench = 1;
        }

        if(!strcmp(av[j], "-m")) {
            mem = 1;
        }
    }

    for(; j < ac; j++) {
        char *input = get_input(av[j], &len);

        if (input == NULL) {
            fprintf(stdout, "Unable to open file '%s'\n", av[j]);
            continue;
        }

        if(bench) {
            if (!run_bench(av[j], (const char*)input, len, parse)) {
                return -1;
            }
        } else {
            struct timeval s, e;
            gettimeofday(&s, NULL);
            void *data = parse((const char*)input, len);
            gettimeofday(&e, NULL);

            if (verbose) {
                if (data != NULL) {
                    fprintf(stdout, "AST:\n");
                    cnez_dump(data, stdout, 0);
                    fprintf(stdout, "\n");
                }
            }
            fprintf(stdout, "%s - %s in %0.4f[us]\n", av[j], data ? "PASS" : "FAIL", timediff(&s, &e));

            if(mem) {
                cnez_dump_memory("Memory Usage", data);
            }
            cnez_free(data);
        }

        free((void*) input);
    }
    return 0;
}
#endif  /* UNUSE_MAIN */
